const dogs = [ 
    { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] }, 
    { weight: 8, curFood: 200, owners: ['Matilda'] }, 
    { weight: 13, curFood: 275, owners: ['Sarah', 'John'] }, 
    { weight: 32, curFood: 340, owners: ['Michael'] }, 
    ]; 

    function checkFoodPortion(currentFood, recommendedFood) {
        const lowerBound = recommendedFood * 0.9; // 10% d∆∞·ªõi m·ª©c khuy·∫øn ngh·ªã
        const upperBound = recommendedFood * 1.1; // 10% tr√™n m·ª©c khuy·∫øn ngh·ªã
    
        if (currentFood > upperBound) {
            console.log("ƒÇn qu√° nhi·ªÅu üê∂üçñ");
             
        } else if (currentFood < lowerBound) {
            console.log("ƒÇn qu√° √≠t üê∂ü•ï");
             ;
        } else {
            console.log("ƒÇn v·ª´a ƒë·ªß ‚úÖ");
        }
    }
//1
dogs.forEach(dog=>{
    dog.recommendedFood  = Math.round(dog.weight ** 0.75 * 28);
});
//2
console.log("Ch√≥ c·ªßa Sarah");
const Sarah_Dogs = dogs.filter(dog=>dog.owners.includes("Sarah"));
Sarah_Dogs.forEach(dog=>{
    console.log(dog);
    checkFoodPortion(dog.curFood,dog.recommendedFood);
})
// 3. T·∫°o danh s√°ch ch·ªß nu√¥i d·ª±a tr√™n m·ª©c ƒÉn c·ªßa ch√≥
const ownersEatTooMuch = dogs
    .filter(dog => dog.curFood > dog.recommendedFood * 1.1) // ƒÇn qu√° nhi·ªÅu
    .flatMap(dog => dog.owners);

const ownersEatTooLittle = dogs
    .filter(dog => dog.curFood < dog.recommendedFood * 0.9) // ƒÇn qu√° √≠t
    .flatMap(dog => dog.owners);

    console.log("Ch·ªß c·ªßa ch√≥ ƒÉn qu√° nhi·ªÅu:", ownersEatTooMuch);
    console.log("Ch·ªß c·ªßa ch√≥ ƒÉn qu√° √≠t:", ownersEatTooLittle);
// 4. In ra chu·ªói th√¥ng b√°o
console.log(`${ownersEatTooMuch.join(" v√† ")}'s dogs eat too much!`);
console.log(`${ownersEatTooLittle.join(" v√† ")}'s dogs eat too little!`);

// 5. Ki·ªÉm tra c√≥ ch√≥ n√†o ƒÉn ƒë√∫ng kh·∫©u ph·∫ßn kh√¥ng
const hasDogEatingExact = dogs.some(dog => dog.curFood === dog.recommendedFood);
console.log("C√≥ ch√≥ n√†o ƒÉn ƒë√∫ng l∆∞·ª£ng khuy·∫øn ngh·ªã kh√¥ng?", hasDogEatingExact);

// 6. Ki·ªÉm tra c√≥ ch√≥ n√†o ƒÉn trong kho·∫£ng h·ª£p l√Ω kh√¥ng
const hasDogEatingOkay = dogs.some(dog => {
    const lowerBound = dog.recommendedFood * 0.9;
    const upperBound = dog.recommendedFood * 1.1;
    return dog.curFood >= lowerBound && dog.curFood <= upperBound;
});
console.log("C√≥ ch√≥ n√†o ƒÉn trong kho·∫£ng h·ª£p l√Ω kh√¥ng?", hasDogEatingOkay);

// 7. Danh s√°ch ch√≥ ƒÉn h·ª£p l√Ω
const dogsEatingOkay = dogs.filter(dog => {
    const lowerBound = dog.recommendedFood * 0.9;
    const upperBound = dog.recommendedFood * 1.1;
    return dog.curFood >= lowerBound && dog.curFood <= upperBound;
});
console.log("Danh s√°ch ch√≥ ƒÉn h·ª£p l√Ω:", dogsEatingOkay);

// 8. S·∫Øp x·∫øp m·∫£ng theo kh·∫©u ph·∫ßn khuy·∫øn ngh·ªã (tƒÉng d·∫ßn)
const sortedDogs = [...dogs].sort((a, b) => a.recommendedFood - b.recommendedFood);
console.log("Ch√≥ s·∫Øp x·∫øp theo kh·∫©u ph·∫ßn khuy·∫øn ngh·ªã:", sortedDogs);